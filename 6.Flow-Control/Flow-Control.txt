CSS Bukanlah bahasa pemrograman, karena itu kita tidak bisa melakukan flow control pada code kita, tapi dengan sass kita bisa melakukan flow control seperti pengkondisian, dll.

Ada beberapa keyword yang bisa kita gunakan yaitu:
- @if, @else, @else if
- @for
- @while
- @each

secara garis besar konsepnya sama seperti bahasa pemrograman, jadi untuk kalian yang sudah memahami flow control di bahasa pemrograman, pasti akan lebih mudah memahaminya.

Oke, kita coba yang pertama, yaitu @if, misal kita ingin membuat sebuah profile picture yang ada di navbar dan ada di main sectionnya, dan profile pict di navbar ini ukurannya kecil dan berbentuk lingkaran, sedangkan yang di main section lebih besar dan bentuknya kotak.

Kita bisa buat mixin lebih dulu supaya tidak terjadi pengulangan penulisan, dan di mixin ini kita bisa berikan arguments, yang pertama untuk menentukan ukurannya, dan yang kedua untuk menentukan apakah dia circle atau bukan yang nantinya akan kita cek dengan @if

@mixin profile-pict($size, $cirlce: false) {
  width: $size;
  height: $size;
  border: 5px solid white;
  box-shadow: 1px 1px 5px rgba($color: #000, $alpha: 0.3);

  @if $circle {
    border-radius: 50%;
  }
}

sekarang kita akan mencoba menggunakan @else juga, misal kita ingin membuat light mode dan dark mode pada website kita, kita bisa membuat variable lebih dulu dan membuat mixinnya

$light-bg: #eaeaea;
$light-text: #333;
$dark-bg: #999;
$dark-text: #ddd;

@mixin color-mode($light-mode: true) {
	@if $light-mode {
		background-color: $light-bg;
		color: $light-text;
	} @else {
		background-color: $dark-bg;
		color: $dark-text;
	}
}

dan kita juga bisa menggunakan @else if untuk menyisipkan kondisi ditengahnya.

Misal kita ingin membuat sebuah icon segitiga dengan menggunakan border, kita buat seperti ini

@mixin triangle($size, $color, $direction) {
	width: 0;
	height: 0;
	background-color: transparent;
	border: $size/2 solid transparent;

	@if $direction == right {
		border-left-color: $color;
	} @else if $direction == left {
		border-right-color: $color;
	} @else if $direction == bottom {
		border-top-color: $color;
	} @else {
		border-block-color: $color;
	}
}

Lalu kita tinggal memakainya dengan menentukan directionnya

.right {
	@include triangle(2em, black, right);
}


Sekarang kita bahas tentang pengualangan, pertama kita buat pengulangan dengan menggunakan @for

misal kita ingin membuat 10 li yang memiliki background-color dengan warna berbeda yang mana semakin kebawah warnanya akan semakin pudar, jadi seperti kita meng-gradasi ul nya,

tanpa @for kita melakukan itu dengan memberikan warnanya secara manual,

.gradient {
	list-style: none;
	margin: 0;
	padding: 0;

	li {
		padding: 4px;

		&:nth-child(1) {
			background-color: salmon;
		}
		&:nth-child(2) {
			background-color: rgb(248, 137, 124);
		}
		&:nth-child(3) {
			background-color: rgb(251, 148, 137);
		}
		&:nth-child(4) {
			background-color: rgb(249, 158, 148);
		}
	}
}

daripada menulisnya manual seperti ini, kita bisa menulisnya menggunakan @for supaya lebih singkat

@for $i from 1 to 11 {
  li:nth-child(#{$i}) {
    padding: 4px;
    background-color: salmon;
  }
}

di sass @for juga butuh variable untuk menyimpan indexnya dan harus dimulai >= 1 lalu sampai berapa, lalu untuk menggunakan indexnya kita tidak bisa langsung menggunakannya begitu saja, karena kita butuh yang interpolasi #{$i}, lalu bagaimana cara kita membuat apa yang ingin kita buat tadi?

Jadi di sass ada sebuah function yang bernama lighten() dan darken() yang berfungsi untuk mengelola warna untuk membuatnya lebih terang atau lebih gelap

@for $i from 1 to 11 {
  li:nth-child(#{$i}) {
    padding: 4px;
    background-color: lighten($color: salmon, $amount: 20%);
  }
}

jika seperti ini semuanya akan berwarna salmon yang lebih terang 20%, tapi kita inginnya warnanya bergradasi karena itu kita bisa menggunakan indexnya sebagai amountnya

@for $i from 1 to 11 {
  li:nth-child(#{$i}) {
    padding: 4px;
    background-color: lighten($color: salmon, $amount: $i * 2%);
  }
}

Selanjutnya @while, kita akan melakukan hal yang sama tapi menggunakan while, keuntungan for adalah semuanya di deklarasikan di satu baris di sebelah @for sedangkan @while konsepnya sama, tapi komponen-komponennya akan dideklarasikan secara terpisah.

$index: nilaiAwal;
@while condition {
  style {

  }

  increement
}

$i: 1;
@while $i < 11 {
  li:nth-child(#{$i}) {
    padding: 4px;
    background-color: lighten($color: salmon, $amount: $i * 2%);
  }
  $i: $i + 1;
}

Yang selanjutnya adalah @each, @each ini digunakan untuk looping juga, tapi khusus untuk Map Variable, misal kita ingin memberikan warna yang berbeda untuk link yang kita punya berdasarkan warna dari social medianya

@each $key, $value in $map {
  .#{$key} {
    color: $value;
  }
}

$social-colors: (
	instagram: red,
	facebook: blue,
	twitter: lightblue,
	linkedin: darkblue,
	github: darkgrey,
);

.socials {
	font-size: 2em;
	font-family: arial;
	font-weight: bold;

	@each $social, $color in $social-colors {
		.#{$social} {
			color: $color;
		}
	}
}